{"version":3,"sources":["TopBar/TopBar.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","connectToBle","setState","isConnecting","options","filters","services","name","navigator","bluetooth","requestDevice","then","device","console","log","gatt","connect","server","getPrimaryService","service","Promise","all","getCharacteristic","characteristics","pulseCharacteristic","satCharacteristic","connected","catch","error","state","react_default","a","createElement","className","classes","root","AppBar_default","position","color","Toolbar_default","Typography_default","variant","grow","Button_default","onClick","CircularProgress_default","size","React","Component","withStyles","flexGrow","menuButton","marginLeft","marginRight","App","src_TopBar_TopBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"2RAsBMA,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASVQ,aAAe,WACXP,EAAKQ,SAAS,CACVC,cAAc,IAGlB,IAIIC,EAAU,CACVC,QAAS,CACL,CAACC,SAAU,CANE,yCAOb,CAACC,KAAM,wBAIfC,UAAUC,UAAUC,cAAcN,GAC7BO,KAAK,SAACC,GAIH,OAHAC,QAAQC,IAAI,SAAWF,EAAOL,MAC9BM,QAAQC,IAAIF,GAELA,EAAOG,KAAKC,YAEtBL,KAAK,SAAAM,GAEF,OADAJ,QAAQC,IAAIG,GACLA,EAAOC,kBApBD,0CAsBhBP,KAAK,SAAAQ,GACF,OAAOC,QAAQC,IAAI,CACfF,EAAQG,kBAvBD,wCAwBPH,EAAQG,kBAvBH,4CA0BZX,KAAK,SAAAY,GACFV,QAAQC,IAAI,aACZpB,EAAKQ,SAAS,CACVsB,oBAAqBD,EAAgB,GACrCE,kBAAmBF,EAAgB,GACnCG,WAAW,EACXvB,cAAc,MAGrBwB,MAAM,SAACC,GACJlC,EAAKQ,SAAS,CACVC,cAAc,IAElBU,QAAQC,IAAI,yBAA2Bc,MAtD/ClC,EAAKmC,MAAO,CACRL,oBAAqB,KACrBC,kBAAmB,KACnBC,WAAW,EACXvB,cAAc,GANHT,wEA6Df,OAAOoC,EAAAC,EAAAC,cAAA,OAAKC,UAAWpC,KAAKJ,MAAMyC,QAAQC,MACtCL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAQM,SAAS,SAASC,MAAM,WAC5BR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,KACID,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAYU,QAAQ,KAAKH,MAAM,UAAUL,UAAWpC,KAAKJ,MAAMyC,QAAQQ,MAAvE,6BAGG7C,KAAKgC,MAAMH,YAAc7B,KAAKgC,MAAM1B,cAAiB2B,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAQO,MAAM,UAAUM,QAAS/C,KAAKI,cAAtC,aACtDJ,KAAKgC,MAAM1B,cAAiB2B,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAkBO,MAAM,UAAUQ,KAAM,eArErEC,IAAMC,WAgFZC,cA7FA,CACXd,KAAM,CACFe,SAAU,GAEdR,KAAM,CACFQ,SAAU,GAEdC,WAAY,CACRC,YAAa,GACbC,YAAa,KAoFNJ,CAAmBzD,GCxFnB8D,mLARX,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuB,EAAD,cAJUP,aCQEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBzD,WACrBA,UAAU0D,cAAcC,MAAMxD,KAAK,SAAAyD,GACjCA,EAAaC","file":"static/js/main.0b0863ee.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport withStyles from \"@material-ui/core/es/styles/withStyles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst styles = {\n    root: {\n        flexGrow: 1,\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginLeft: -12,\n        marginRight: 20,\n    },\n};\n\nclass TopBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state= {\n            pulseCharacteristic: null,\n            satCharacteristic: null,\n            connected: false,\n            isConnecting: false,\n        };\n    }\n\n    connectToBle = () => {\n        this.setState({\n            isConnecting: true,\n        });\n\n        const service_uuid = \"65052f48-6410-40d9-901f-2a2077f4aada\";\n        const pulse_uuid = \"bd0c8283-1ef4-40d5-a9cf-418913f3bc37\";\n        const sat_uuid = \"6a840204-5b21-4866-a5a5-e349e2602d3e\";\n\n        let options = {\n            filters: [\n                {services: [service_uuid]},\n                {name: 'Oxymetre Formation'}\n            ],\n        };\n\n        navigator.bluetooth.requestDevice(options)\n            .then((device) => {\n                console.log('Name: ' + device.name);\n                console.log(device);\n\n                return device.gatt.connect();\n            })\n            .then(server => {\n                console.log(server);\n                return server.getPrimaryService(service_uuid);\n            })\n            .then(service => {\n                return Promise.all([\n                    service.getCharacteristic(pulse_uuid),\n                    service.getCharacteristic(sat_uuid)\n                ])\n            })\n            .then(characteristics => {\n                console.log('connected');\n                this.setState({\n                    pulseCharacteristic: characteristics[0],\n                    satCharacteristic: characteristics[1],\n                    connected: true,\n                    isConnecting: false,\n                });\n            })\n            .catch((error) => {\n                this.setState({\n                    isConnecting: false,\n                });\n                console.log(\"Something went wrong. \" + error);\n            });\n    };\n\n    render() {\n        return <div className={this.props.classes.root}>\n            <AppBar position=\"static\" color=\"primary\">\n                <Toolbar>\n                    <Typography variant=\"h6\" color=\"inherit\" className={this.props.classes.grow}>\n                        Oxym√®tre de formation\n                    </Typography>\n                    { !this.state.connected && !this.state.isConnecting && (<Button color=\"inherit\" onClick={this.connectToBle}>Connecter</Button>) }\n                    { this.state.isConnecting && (<CircularProgress color=\"inherit\" size={20} />) }\n                </Toolbar>\n            </AppBar>\n        </div>;\n    }\n}\n\nTopBar.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(TopBar);\n","import React, { Component } from 'react';\nimport './App.css';\nimport TopBar from \"./TopBar/TopBar\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TopBar />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}